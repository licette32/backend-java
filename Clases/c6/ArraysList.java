import java.util.ArrayList;
public class ArraysList {
    /*
     * ArrayList es una implementaci√≥n de la interfaz List.
       Se usa cuando queremos una lista din√°mica, con acceso r√°pido por √≠ndice.
       Ideal para lectura frecuente; no se recomienda si hay muchas inserciones al medio (usar LinkedList en ese caso).
       Resumen de M√©todos √∫tiles (List y ArrayList)

        M√©todo	Descripci√≥n
        add(valor)	Agrega un elemento
        get(indice)	Obtiene el valor en una posici√≥n
        set(indice, valor)	Modifica un valor en una posici√≥n
        remove(valor/√≠ndice)	Elimina por valor o posici√≥n
        contains(valor)	Verifica si existe un valor
        size()	Devuelve la cantidad de elementos
        clear()	Vac√≠a la lista
        isEmpty()	Verifica si est√° vac√≠a
        indexOf(valor)	Devuelve la posici√≥n de un valor (si no existe, devuelve -1)
        lastIndexOf(valor)	Devuelve la √∫ltima posici√≥n de un valor (si no existe, devuelve -1)
        toArray()	Convierte a un array
        sort()	Ordena la lista (necesita Collections.sort())
     */
    public static void main(String[] args) {
        // Creamos un ArrayList de n√∫meros enteros
        ArrayList<Integer> edades = new ArrayList<>();

        // Agregamos elementos
        edades.add(25);
        edades.add(30);
        edades.add(22);

        // Recorremos con for tradicional
        for (int i = 0; i < edades.size(); i++) {
            System.out.println("Edad en posici√≥n " + i + ": " + edades.get(i));
        }

        // Modificamos un valor
        edades.set(1, 35); // Cambia el valor en posici√≥n 1
        System.out.println("Lista despu√©s de modificar: " + edades);

       /* edades.set(100,3);
        System.out.println("Lista despu√©s de modificar: " + edades);*/ 

        // Eliminamos un valor por √≠ndice
       /* edades.remove(0); // Elimina el primer valor
        System.out.println("Lista despu√©s de eliminar: " + edades);*/ 

        // Vaciar la lista
        /*edades.clear();
        System.out.println("Lista vac√≠a: " + edades);*/
        // TAREA HACER UN ARRAYLIST SIN TIPO DE DATO
    }
}
    
    /*
     * IMPORTANTE
     *  List es una interfaz
        Es parte del framework de colecciones de Java.

        Define comportamientos gen√©ricos para listas (como add, remove, get, etc.).

        No se puede instanciar directamente:

        List<String> lista = new List<>(); // ERROR
        Se utiliza para programar hacia una interfaz, lo cual es una buena pr√°ctica.

        ArrayList es una clase concreta
        Implementa la interfaz List.

        Tiene una estructura basada en array din√°mico.

        Se puede instanciar directamente:

        ArrayList<String> lista = new ArrayList<>(); // CORRECTO
        üß† Resumen:
        IMPORTANTE: CUANDO VEAMOS POO ESTO COBRARA SENTIDO
        Caracter√≠stica	               List (interfaz)	               ArrayList (clase concreta)
        ¬øSe puede instanciar?	          ‚ùå No	                         ‚úÖ S√≠
        ¬øTiene comportamiento propio?	  ‚ùå No, solo define	             ‚úÖ S√≠, lo implementa
        ¬øPermite flexibilidad?	          ‚úÖ Alta (interfaz)	             üîÅ Limitada a su implementaci√≥n
        ¬øRecomendaci√≥n?	                Declarar como List	               Usar ArrayList como          implementaci√≥n concreta
     */
